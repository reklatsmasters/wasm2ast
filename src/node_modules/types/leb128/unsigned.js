const BN = require('bn.js')

// LEB128 unsigned impl

module.exports = unsigned

function unsigned(bits) {
  const size = Math.ceil(bits / 7)

  return {
    encode,
    decode,
    encodingLength
  }

  function encode(value, wstream) {
    const number = new BN(value)
    const bytes = []

    do {
      let byte = number.maskn(7).toNumber()
      number.ishrn(7)

      if (!number.isZero()) {
        byte |= 0x80
      }

      bytes.push(byte)
    } while (!number.isZero())

    const output = Buffer.from(bytes)

    encode.bytes = output.length
    wstream.writeBuffer(output)
  }

  function decode(rstream, meta) {
    const number = new BN(0)
    let shift = 0
    const last = size - 1

    for (let i = 0; i < size; ++i) {
      const byte = rstream.readUInt8()
      meta.bytes++

      number.ior(new BN(byte & 0x7F).shln(shift))
      shift += 7

      if (msb(byte) === 0) {
        break
      } else if (i === last) {
        throw new Error('MSB of last byte should be zero.')
      }
    }

    return number
  }

  function encodingLength() {
    return size
  }
}

function msb(byte) {
  return byte >> 7
}
