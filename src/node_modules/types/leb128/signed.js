const BN = require('bn.js')

module.exports = signed

function signed(bits, padding = 0x80) {
  const size = Math.ceil(bits / 7)

  return {
    encode,
    decode,
    encodingLength
  }

  function encode(value, wstream) {
    const number = new BN(value)
    const bytes = []
    let more = true
    const negative = number.isNeg()

    while(more) {
      let byte = number.maskn(7).toNumber()
      number.ishrn(7)

      if (negative) {
        number.iorn(- (1 << (bits - 7))) // fix 64
      }

      if ((number.isZero() && signbit(byte) === 0) || (number.eqn(-1) && signbit(byte) !== 0)) {
        more = false
      } else {
        byte |= 0x80
      }

      bytes.push(byte)
    }

    const output = Buffer.from(bytes)

    wstream.writeBuffer(output)
    encode.bytes = output.length
  }

  function decode(rstream) {
    decode.bytes = size
    const number = new BN(0)
    let shift = 0
    const last = size - 1
    let byte = 0

    for (let i = 0; i < size; ++i) {
      byte = rstream.readUInt8()

      number.ior(new BN(byte & 0x7F).shln(shift))
      shift += 7

      if (msb(byte) === 0) {
        break
      }

      if (i === last) {
        throw new Error('MSB of last byte should be zero.')
      }
    }

    if ((shift < bits) && (signbit(byte) !== 0)) {
      number.setn(shift)
    }

    return number.fromTwos(shift)
  }

  function encodingLength() {
    return size
  }
}

function signbit(byte) {
  return byte & 0x40
}

function msb(byte) {
  return byte >> 7
}
